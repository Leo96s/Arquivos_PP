/*

Name: Joaquim Fontes Matos
Number: 8220816
Class: LEI12T3
Name: Leonardo Henrique Barbosa Da Silva
Number: 8220183
Class: LEI12T3
 */
package projeto_pp;

import java.io.IOException;
import java.text.ParseException;
import java.time.LocalDate;
import ma02_resources.participants.Participant;
import ma02_resources.project.Edition;
import ma02_resources.project.Project;
import ma02_resources.project.Status;

public class EditionImpl implements Edition {

    private String name;

    private LocalDate start;

    private String projectTemplate;

    private Status status;

    private int numberOfProjects;

    private Project[] project;

    private int count;

    private LocalDate end;

    private final int MAX = 3;

    public EditionImpl(String name, LocalDate start, String project_template, Status status, int numberOfProjects, LocalDate end) {
        this.name = name;
        this.start = start;
        this.projectTemplate = project_template;
        this.status = status;
        this.numberOfProjects = numberOfProjects;
        this.end = end;
        this.project = new Project[MAX];
    }

    /**
     *
     * Returns the name of the edition.
     *
     * @return The name of the edition.
     */
    @Override
    public String getName() {
        return name;
    }

    /**
     *
     * Returns the start date of the edition.
     *
     * @return The start date of the edition.
     */
    @Override
    public LocalDate getStart() {
        return start;
    }

    /**
     *
     * Returns the project template of the edition.
     *
     * @return The project template of the edition.
     */
    @Override
    public String getProjectTemplate() {
        return projectTemplate;
    }

    /**
     *
     * Returns the status of the edition.
     *
     * @return The status of the edition.
     */
    @Override
    public Status getStatus() {
        return status;
    }

    /**
     *
     * Sets the status of the edition.
     *
     * @param status The new status of the edition.
     */
    @Override
    public void setStatus(Status status) {
        this.status = status;
    }

    /**
     *
     * Returns the number of projects in the edition.
     *
     * @return The number of projects in the edition.
     */
    @Override
    public int getNumberOfProjects() {
        return numberOfProjects;
    }

    /**
     *
     * Returns the end date of the edition.
     *
     * @return The end date of the edition.
     */
    @Override
    public LocalDate getEnd() {
        return end;
    }

    private void extendsProject() {
        Project[] temp = new Project[MAX * 2];

        for (int i = 0; i < this.count; i++) {
            temp[i] = this.project[i];
        }

        this.project = temp;
    }

    /**
     *
     * Adds a new project to the edition.
     *
     * @param projectName The name of the project.
     * @param projectDescription The description of the project.
     * @param contributors The contributors of the project.
     * @throws IOException If the maximum number of projects is reached for this
     * edition.
     * @throws ParseException If the project cannot be parsed.
     */
    @Override
    public void addProject(String projectName, String projectDescription, String[] contributors) throws IOException, ParseException {
        if (this.count == this.project.length) {
            extendsProject();
        }
        ProjectImpl newProject = new ProjectImpl(projectName, projectDescription, contributors);
        project[count++] = newProject;
        numberOfProjects++;
    }

    /**
     *
     * Removes a project from the edition.
     *
     * @param string The name of the project to be removed.
     */
    @Override
    public void removeProject(String string) {
        int indexToRemove = 0;
        for (int i = 0; i < this.count; i++) {
            if (this.project[i].getName().equals(string)) {
                indexToRemove = i;
            }
        }
        for (int i = indexToRemove; i < this.count - 1; i++) {
            this.project[i] = this.project[i + 1];
        }
        this.count--;
        this.project[this.count] = null;
    }

    /**
     *
     * Retrieves a project from the edition.
     *
     * @param string The name of the project to retrieve.
     *
     * @return The project with the specified name, or null if not found.
     */
    @Override
    public Project getProject(String string) {
        for (Project temp : this.project) {
            if (temp.getName().equals(string)) {
                return temp;
            } else {
                System.out.println("Project not Found!");

            }
        }
        return null;
    }

    /**
     *
     * Returns an array of all the projects in the edition.
     *
     * @return An array of all the projects in the edition.
     */
    @Override
    public Project[] getProjects() {
        return this.project;
    }

    /**
     *
     * Returns an array of projects that have a specific tag.
     *
     * @param string The tag to filter the projects by.
     * @return An array of projects that have the specified tag.
     */
    @Override
    public Project[] getProjectsByTag(String string) {

        return this.project;
    }

    /**
     *
     * Returns an array of projects that have a specific contributor.
     *
     * @param email
     * @param string The contributor to filter the projects by.
     *
     * @return An array of projects that have the specified contributor.
     */
    @Override
    public Project[] getProjectsOf(String email) {
        int count = 0;

        // Conta quantos projetos possuem o participante com o email especificado
        for (Project project : this.project) {
            if (project.getParticipant(email).getEmail().equals(email)) {
                count++;
                break; // Evita contar o mesmo projeto várias vezes
            }
        }

        // Cria um array para armazenar os projetos encontrados
        Project[] result = new Project[count];
        int index = 0;

        // Adiciona os projetos encontrados ao array
        for (Project project : this.project) {
            if (project.getParticipant(email).getEmail().equals(email)) {
                result[index] = project;
                index++;
                break; // Evita adicionar o mesmo projeto várias vezes
            }
        }

        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Edition: ").append(name).append("\n");
        sb.append("Start: ").append(start).append("\n");
        sb.append("Project Template: ").append(projectTemplate).append("\n");
        sb.append("Status: ").append(status).append("\n");
        sb.append("Number of Projects: ").append(numberOfProjects).append("\n");
        sb.append("End: ").append(end).append("\n");
        sb.append("Projects:").append("\n");
        for (int i = 0; i < count; i++) {
            sb.append(project[i].toString()).append("\n");
        }
        return sb.toString();
    }

}