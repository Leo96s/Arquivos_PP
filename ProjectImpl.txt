/* 
* Nome: Joaquim Fontes Matos
* Número: 8220816
* Turma: LEI12T3
* 
* Nome: Leonardo Henrique Barbosa Da Silva
* Número: 8220183
* Turma: LEI12T3
 */
package projeto_pp;

import java.util.Arrays;
import ma02_resources.participants.*;
import ma02_resources.project.Project;
import ma02_resources.project.Task;
import ma02_resources.project.exceptions.IllegalNumberOfParticipantType;
import ma02_resources.project.exceptions.IllegalNumberOfTasks;
import ma02_resources.project.exceptions.ParticipantAlreadyInProject;
import ma02_resources.project.exceptions.TaskAlreadyInProject;

public class ProjectImpl implements Project {

    private String name;
    private String description;
    private int numberOfParticipants;
    private int numberOfStudents;
    private int numberOfPartners;
    private int numberOfFacilitators;
    private int numberOfTasks;
    private int maximumNumberOfTasks;
    private long maximumNumberOfParticipants;
    private int maximumNumberOfStudents;
    private int maximumNumberOfPartners;
    private int maximumNumberOfFacilitators;
    private Participant[] participants;
    private Task[] tasks;
    private String[] tags;

    public ProjectImpl(String name, String description, int maximumNumberOfTasks, long maximumNumberOfParticipants, int maximumNumberOfStudents, int maximumNumberOfPartners, int maximumNumberOfFacilitators, String[] tags) {
        this.name = name;
        this.description = description;
        this.maximumNumberOfTasks = maximumNumberOfTasks;
        this.maximumNumberOfParticipants = maximumNumberOfParticipants;
        this.maximumNumberOfStudents = maximumNumberOfStudents;
        this.maximumNumberOfPartners = maximumNumberOfPartners;
        this.maximumNumberOfFacilitators = maximumNumberOfFacilitators;
        this.tags = tags;
        this.participants = new Participant[(int) this.maximumNumberOfParticipants];
        this.tasks = new Task[this.maximumNumberOfTasks];
    }

    public ProjectImpl(String name, String description, String[] tags) {
        this.name = name;
        this.description = description;
        this.tags = tags;
    }

    @Override
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public int getNumberOfParticipants() {
        return numberOfParticipants;
    }

    public void setNumberOfParticipants(int numberOfParticipants) {
        this.numberOfParticipants = numberOfParticipants;
    }

    @Override
    public int getNumberOfStudents() {
        return numberOfStudents;
    }

    public void setNumberOfStudents(int numberOfStudents) {
        this.numberOfStudents = numberOfStudents;
    }

    @Override
    public int getNumberOfPartners() {
        return numberOfPartners;
    }

    public void setNumberOfPartners(int numberOfPartners) {
        this.numberOfPartners = numberOfPartners;
    }

    @Override
    public int getNumberOfFacilitators() {
        return numberOfFacilitators;
    }

    public void setNumberOfFacilitators(int numberOfFacilitators) {
        this.numberOfFacilitators = numberOfFacilitators;
    }

    @Override
    public int getNumberOfTasks() {
        return numberOfTasks;
    }

    public void setNumberOfTasks(int numberOfTasks) {
        this.numberOfTasks = numberOfTasks;
    }

    @Override
    public int getMaximumNumberOfTasks() {
        return maximumNumberOfTasks;
    }

    public void setMaximumNumberOfTasks(int maximumNumberOfTasks) {
        this.maximumNumberOfTasks = maximumNumberOfTasks;
    }

    @Override
    public long getMaximumNumberOfParticipants() {
        return maximumNumberOfParticipants;
    }

    public void setMaximumNumberOfParticipants(int maximumNumberOfParticipants) {
        this.maximumNumberOfParticipants = maximumNumberOfParticipants;
    }

    @Override
    public int getMaximumNumberOfStudents() {
        return maximumNumberOfStudents;
    }

    public void setMaximumNumberOfStudents(int maximumNumberOfStudents) {
        this.maximumNumberOfStudents = maximumNumberOfStudents;
    }

    @Override
    public int getMaximumNumberOfPartners() {
        return maximumNumberOfPartners;
    }

    public void setMaximumNumberOfPartners(int maximumNumberOfPartners) {
        this.maximumNumberOfPartners = maximumNumberOfPartners;
    }

    @Override
    public int getMaximumNumberOfFacilitators() {
        return maximumNumberOfFacilitators;
    }

    public void setMaximumNumberOfFacilitators(int maximumNumberOfFacilitators) {
        this.maximumNumberOfFacilitators = maximumNumberOfFacilitators;
    }

    @Override
    public Task[] getTasks() {
        return tasks;
    }

    public void setTasks(Task[] tasks) {
        this.tasks = tasks;
    }

    @Override
    public String[] getTags() {
        return tags;
    }

    public void setTags(String[] tags) {
        this.tags = tags;
    }

    public boolean isParticipantAlreadyInProject(Participant p) {
        for (Participant temp : this.participants) {
            if (p != null && p.equals(temp)) {
                return true;
            }
        }
        return false;
    }

    private boolean isParticipantTypeMax(Participant p) {
        if (p instanceof Student) {

        } else if (p instanceof Facilitator) {
            if (this.numberOfFacilitators == this.maximumNumberOfFacilitators) {
                return true;
            }
        } else if (p instanceof Partner) {
            if (this.numberOfPartners == this.maximumNumberOfPartners) {
                return true;
            }
        } else if (p instanceof Student) {
            if (this.numberOfStudents == this.maximumNumberOfStudents) {
                return true;
            }
        } else if (this.numberOfParticipants == this.maximumNumberOfParticipants) {
            return true;
        }
        return false;
    }

    @Override
    public void addParticipant(Participant p) throws IllegalNumberOfParticipantType, ParticipantAlreadyInProject {
        try {
            if (this.isParticipantTypeMax(p)) {
                throw new IllegalNumberOfParticipantType("Illegal Number Of Participants Type");
            }
            if (this.isParticipantAlreadyInProject(p)) {
                throw new ParticipantAlreadyInProject("Participant Already In Project");
            }
            this.participants[this.numberOfParticipants++] = p;
        } catch (IllegalNumberOfParticipantType exc) {
            System.out.println(exc.getMessage());
        } catch (ParticipantAlreadyInProject exc) {
            System.out.println(exc.getMessage());
        }
    }

    @Override
    public Participant removeParticipant(String string) {
        try {
            int indexToRemove = -1, i;
            for (i = 0; i < this.numberOfParticipants; i++) {
                if (this.participants[i].getEmail().equals(string));
                indexToRemove = i;
            }

            if (indexToRemove == -1) {
                throw new IllegalArgumentException("Illegal Argument Exception");
            }

            Participant temp = this.participants[indexToRemove];

            for (i = indexToRemove; i < this.participants.length - 1; i++) {
                this.participants[i] = this.participants[i + 1];
            }
            this.participants[i] = null;

            return temp;
        } catch (IllegalArgumentException exc) {
            System.out.println(exc.getMessage());
            return null;
        }
    }

    @Override
    public Participant getParticipant(String string) {
        try {
            for (Participant temp : this.participants) {
                if (temp.getEmail().equals(string)) {
                    return temp;
                }
            }
            throw new IllegalArgumentException("Illegal Argument Exception");
        } catch (IllegalArgumentException exc) {
            System.out.println(exc.getMessage());
            return null;
        }
    }

    public Participant[] getParticipants() {
        return participants;
    }

    @Override
    public boolean hasTag(String string) {
        for (String tag : this.tags) {
            if (tag.equals(string)) {
                return true;
            }
        }
        return false;
    }

    private boolean isTaskAlreadyInProject(Task task) {
        for (Task temp : this.tasks) {
            if (temp != null && temp.equals(task)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void addTask(Task task) throws IllegalNumberOfTasks, TaskAlreadyInProject {
        try {
            if (this.isTaskAlreadyInProject(task)) {
                throw new TaskAlreadyInProject("Task Already In Project");
            } else if (this.numberOfTasks == this.maximumNumberOfTasks) {
                throw new IllegalNumberOfTasks("Illegal Number Of Tasks");
            } else {
                this.tasks[this.numberOfTasks++] = task;
            }
        } catch (TaskAlreadyInProject exc) {
            System.out.println(exc.getMessage());
        } catch (IllegalNumberOfTasks exc) {
            System.out.println(exc.getMessage());
        }
    }

    @Override
    public Task getTask(String string
    ) {
        for (Task task : this.tasks) {
            if (task.getTitle().equals(string)) {
                return task;
            }
        }
        return null;
    }

    @Override
    public boolean isCompleted() {
        boolean isCompleted = true;
        for (Task task : this.tasks) {
            if (task != null && task.getSubmissions().length < 1) {
                isCompleted = false;
            }
        }
        return isCompleted;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Project Name: ").append(name).append("\n");
        sb.append("Description: ").append(description).append("\n");
        sb.append("Number of Participants: ").append(numberOfParticipants).append("\n");
        sb.append("Number of Students: ").append(numberOfStudents).append("\n");
        sb.append("Number of Partners: ").append(numberOfPartners).append("\n");
        sb.append("Number of Facilitators: ").append(numberOfFacilitators).append("\n");
        sb.append("Number of Tasks: ").append(numberOfTasks).append("\n");
        sb.append("Maximum Number of Tasks: ").append(maximumNumberOfTasks).append("\n");
        sb.append("Maximum Number of Participants: ").append(maximumNumberOfParticipants).append("\n");
        sb.append("Maximum Number of Students: ").append(maximumNumberOfStudents).append("\n");
        sb.append("Maximum Number of Partners: ").append(maximumNumberOfPartners).append("\n");
        sb.append("Maximum Number of Facilitators: ").append(maximumNumberOfFacilitators).append("\n");
        sb.append("Tags: ").append("\n");
        for (String tag : this.tags) {
            sb.append(tag).append(", ");  
        }
        return sb.toString();
    }

}